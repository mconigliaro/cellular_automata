#!/usr/bin/env python

import argparse as ap
import cellular_automata as ca
import cellular_automata.visualizations.curses as cur
import importlib as il
import shutil as sh
import random as rand


columns, lines = sh.get_terminal_size(fallback=(256, 256))

parser = ap.ArgumentParser(
    description="Simple cellular automata implementation")
parser.add_argument('-s', '--seed', help='Random seed')
parser.add_argument('-x', '--height', type=int, default=lines-1,
                    help='Grid height')
parser.add_argument('-y', '--width', type=int, default=columns-1,
                    help='Grid width')
parser.add_argument('-p', '--population', type=float, default=100/3,
                    help='Initial population as a percentage of the grid')
parser.add_argument('-r', '--rulestring', default='b3/s23',
                    help='Rulestring in B/S notation')
parser.add_argument('-n', '--neighborhood',
                    default='[[1, 1, 1], [1, 0, 1], [1, 1, 1]]',
                    help='Bitmask to determine neighbors of each cell')
parser.add_argument('-v', '--visualization', choices=('curses', 'none'),
                    default='curses', help='Visualization type')
parser.add_argument('-t', '--theme', choices=cur.THEMES.keys(),
                    default='default', help='Color theme')
parser.add_argument('-d', '--delay', type=float, default=0,
                    help='Refresh delay in seconds')
args = parser.parse_args()

rand.seed(args.seed)

generations = ca.generations(
    height=args.height,
    width=args.width,
    population=args.population,
    rulestring=args.rulestring,
    neighborhood=eval(args.neighborhood, {})
)

module_base = 'cellular_automata.visualizations'
vis = il.import_module(f'{module_base}.{args.visualization}')
try:
    vis.run(generations, args)
except KeyboardInterrupt:
    pass
